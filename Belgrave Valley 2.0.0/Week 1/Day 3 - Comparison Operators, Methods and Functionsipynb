{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"name":"Day 3.ipynb","provenance":[],"collapsed_sections":["Qi-wxGyCsAI9","4WnBpxx5sAJD","cBaW-4HXsAJ2","kRpC5dZ7sAJ5","7qaXHw01sAKA","tXbJTsTSsAKF"]}},"cells":[{"cell_type":"markdown","metadata":{"id":"-b-xgxQgsAIj","colab_type":"text"},"source":["<img src=\"https://user-images.strikinglycdn.com/res/hrscywv4p/image/upload/c_limit,fl_lossy,h_300,w_300,f_auto,q_auto/1266110/Logo_wzxi0f.png\" style=\"float: left; margin: 20px; height: 55px\">\n","\n","***Sometimes it is the people no one can imagine anything of who do the things no one can imagine. - Alan Turing***"]},{"cell_type":"markdown","metadata":{"id":"om4wnzPhsAIk","colab_type":"text"},"source":["# 1. Comparison Operators \n","\n","In this lecture we will be learning about Comparison Operators in Python. These operators will allow us to compare variables and output a Boolean value (True or False). \n","\n","If you have any sort of background in Math, these operators should be very straight forward.\n","\n","First we'll present a table of the comparison operators and then work through some examples:\n","\n","<h2> Table of Comparison Operators </h2><p>  In the table below, a=3 and b=4.</p>\n","\n","<table class=\"table table-bordered\">\n","<tr>\n","<th style=\"width:10%\">Operator</th><th style=\"width:45%\">Description</th><th>Example</th>\n","</tr>\n","<tr>\n","<td>==</td>\n","<td>If the values of two operands are equal, then the condition becomes true.</td>\n","<td> (a == b) is not true.</td>\n","</tr>\n","<tr>\n","<td>!=</td>\n","<td>If values of two operands are not equal, then condition becomes true.</td>\n","<td>(a != b) is true</td>\n","</tr>\n","<tr>\n","<td>&gt;</td>\n","<td>If the value of left operand is greater than the value of right operand, then condition becomes true.</td>\n","<td> (a &gt; b) is not true.</td>\n","</tr>\n","<tr>\n","<td>&lt;</td>\n","<td>If the value of left operand is less than the value of right operand, then condition becomes true.</td>\n","<td> (a &lt; b) is true.</td>\n","</tr>\n","<tr>\n","<td>&gt;=</td>\n","<td>If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.</td>\n","<td> (a &gt;= b) is not true. </td>\n","</tr>\n","<tr>\n","<td>&lt;=</td>\n","<td>If the value of left operand is less than or equal to the value of right operand, then condition becomes true.</td>\n","<td> (a &lt;= b) is true. </td>\n","</tr>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"c8F8FL2VsAIl","colab_type":"text"},"source":["Let's now work through quick examples of each of these.\n","\n","#### Equal"]},{"cell_type":"code","metadata":{"id":"nvDfF7uesAIl","colab_type":"code","outputId":"eb19ec28-f2b2-4dd0-867a-c0a906aa85e2","colab":{}},"source":["2 == 2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"gcOEZnAKsAIp","colab_type":"code","outputId":"63e9afe7-8274-4abd-d233-5ba4839ad0ce","colab":{}},"source":["1 == 0"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"215Z7UousAIr","colab_type":"text"},"source":["Note that <code>==</code> is a <em>comparison</em> operator, while <code>=</code> is an <em>assignment</em> operator."]},{"cell_type":"markdown","metadata":{"id":"mpHZcSshsAIs","colab_type":"text"},"source":["#### Not Equal"]},{"cell_type":"code","metadata":{"id":"oVq3AR-qsAIt","colab_type":"code","outputId":"e4adbdff-67cb-4d06-cdc3-2095cec5ddc6","colab":{}},"source":["2 != 1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"-xJ_whpIsAIv","colab_type":"code","outputId":"5467d5ee-1a4e-4bbf-ad87-cd6d186a7f1e","colab":{}},"source":["2 != 2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"GUmu0syEsAIy","colab_type":"text"},"source":["#### Greater Than"]},{"cell_type":"code","metadata":{"id":"YfinqGJmsAIz","colab_type":"code","outputId":"94a1abc6-9b55-4baf-d47d-34a957f2ea29","colab":{}},"source":["2 > 1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"jNTQdyyPsAI1","colab_type":"code","outputId":"ce8a9bf0-6cd2-4948-dea8-82575bc2ecb8","colab":{}},"source":["2 > 4"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"0-yJOdw9sAI3","colab_type":"text"},"source":["#### Less Than"]},{"cell_type":"code","metadata":{"id":"jCfNPwuZsAI3","colab_type":"code","outputId":"258e11ad-8f32-49ca-8be5-4d667837cf69","colab":{}},"source":["2 < 4"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"gbuZ_T9rsAI6","colab_type":"code","outputId":"28c01f11-a42e-476a-e9a1-8926f5a0d1f6","colab":{}},"source":["2 < 1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"Qi-wxGyCsAI9","colab_type":"text"},"source":["#### Greater Than or Equal to"]},{"cell_type":"code","metadata":{"id":"Q2WnyUC2sAI9","colab_type":"code","outputId":"5b82136b-0f1f-4654-deb7-bcf305db32e7","colab":{}},"source":["2 >= 2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"VjZ0VlxPsAJA","colab_type":"code","outputId":"53a80d29-2c1b-4465-9d43-b74adf4efa40","colab":{}},"source":["2 >= 1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"4WnBpxx5sAJD","colab_type":"text"},"source":["#### Less than or Equal to"]},{"cell_type":"code","metadata":{"id":"yuz7ilX5sAJE","colab_type":"code","outputId":"f19cf00f-c12b-483b-f47d-452bf59b7fbc","colab":{}},"source":["2 <= 2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"pap655fwsAJG","colab_type":"code","outputId":"70f74f52-7713-48cc-c9d8-1b50311a01d0","colab":{}},"source":["2 <= 4"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"Qb3N8ILKsAJI","colab_type":"text"},"source":["**Great! Go over each comparison operator to make sure you understand what each one is saying. But hopefully this was straightforward for you.**\n","\n","Next we will cover chained comparison operators"]},{"cell_type":"markdown","metadata":{"id":"p3kzAa9vsAJJ","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"VqUzQzIWsAJJ","colab_type":"text"},"source":["# 2. Chained Comparison Operators\n","\n","An interesting feature of Python is the ability to *chain* multiple comparisons to perform a more complex test. You can use these chained comparisons as shorthand for larger Boolean Expressions.\n","\n","In this lecture we will learn how to chain comparison operators and we will also introduce two other important statements in Python: **and** and **or**.\n","\n","Let's look at a few examples of using chains:"]},{"cell_type":"code","metadata":{"id":"gy5Hd-oQsAJK","colab_type":"code","outputId":"1e95245c-6b10-41ba-8957-859ee099f563","colab":{}},"source":["1 < 2 < 3"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"qf_4CFEUsAJM","colab_type":"text"},"source":["The above statement checks if 1 was less than 2 **and** if 2 was less than 3. We could have written this using an **and** statement in Python:"]},{"cell_type":"code","metadata":{"id":"ps_lUKnfsAJM","colab_type":"code","outputId":"5e718174-3b9a-451c-ecf7-74272a58c74d","colab":{}},"source":["1<2 and 2<3"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"sydqnqNpsAJO","colab_type":"text"},"source":["The **and** is used to make sure two checks have to be true in order for the total check to be true. Let's see another example:"]},{"cell_type":"code","metadata":{"id":"uLR49AJasAJP","colab_type":"code","outputId":"63fdd806-7d14-43a6-e65d-1b5c97d0ab6d","colab":{}},"source":["1 < 3 > 2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"MK1qdgv9sAJR","colab_type":"text"},"source":["The above checks if 3 is larger than both of the other numbers, so you could use **and** to rewrite it as:"]},{"cell_type":"code","metadata":{"id":"R499ru79sAJT","colab_type":"code","outputId":"9e9b7cc8-9e68-479d-c565-2b44920e72cb","colab":{}},"source":["1<3 and 3>2"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"zcoKKhoAsAJX","colab_type":"text"},"source":["It's important to note that Python is checking both instances of the comparisons. We can also use **or** to write comparisons in Python. For example:"]},{"cell_type":"code","metadata":{"id":"srYqoeyKsAJY","colab_type":"code","outputId":"da7ca569-fe9a-4dbb-b941-6b1d9363c7b0","colab":{}},"source":["1==2 or 2<3"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"8E3RITw4sAJb","colab_type":"text"},"source":["Note how it was true; this is because with the **or** operator, we only need one *or* the other to be true. Let's see one more example to drive this home:"]},{"cell_type":"code","metadata":{"id":"HQd0cpEasAJc","colab_type":"code","outputId":"31fec8ca-ad42-4173-ba96-a3d7979287b0","colab":{}},"source":["1==1 or 100==1"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"LblWm8-qsAJe","colab_type":"text"},"source":["Great! For an overview of this quick lesson: You should have a comfortable understanding of using **and** and **or** statements as well as reading chained comparison code.\n","\n","Go ahead and go to the quiz for this section to check your understanding!"]},{"cell_type":"markdown","metadata":{"id":"_vvy8fl8sAJf","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"habTCKefsAJg","colab_type":"text"},"source":["# 3. Methods\n","\n","We've already seen a few example of methods when learning about Object and Data Structure Types in Python. Methods are essentially functions built into objects. Later on in the course we will learn about how to create our own objects and methods using Object Oriented Programming (OOP) and classes.\n","\n","Methods perform specific actions on an object and can also take arguments, just like a function. This lecture will serve as just a brief introduction to methods and get you thinking about overall design methods that we will touch back upon when we reach OOP in the course.\n","\n","Methods are in the form:\n","\n","    object.method(arg1,arg2,etc...)\n","    \n","You'll later see that we can think of methods as having an argument 'self' referring to the object itself. You can't see this argument but we will be using it later on in the course during the OOP lectures.\n","\n","Let's take a quick look at what an example of the various methods a list has:"]},{"cell_type":"code","metadata":{"id":"QJ5_hAxgsAJg","colab_type":"code","colab":{}},"source":["# Create a simple list\n","lst = [1,2,3,4,5]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"flLe84a2sAJk","colab_type":"text"},"source":["Fortunately, with iPython and the Jupyter Notebook we can quickly see all the possible methods using the tab key. The methods for a list are:\n","\n","* append\n","* count\n","* extend\n","* insert\n","* pop\n","* remove\n","* reverse\n","* sort\n","\n","Let's try out a few of them:"]},{"cell_type":"markdown","metadata":{"id":"iKvfW_M9sAJk","colab_type":"text"},"source":["append() allows us to add elements to the end of a list:"]},{"cell_type":"code","metadata":{"id":"wQzGzsmisAJl","colab_type":"code","colab":{}},"source":["lst.append([6,6])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UYM-AFi3sAJn","colab_type":"code","outputId":"c9b2df3f-84c0-4d2f-fdf4-9c2f0a24efe1","colab":{}},"source":["lst"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4, 5, 6, 5, [6, 6]]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"DI9VHhVssAJo","colab_type":"code","colab":{}},"source":["lst.extend([5,6,6])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KeU9xVLzsAJq","colab_type":"code","outputId":"4ce3da8e-8e54-4c5d-824c-d1ad4ad45c21","colab":{}},"source":["lst"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[1, 2, 3, 4, 5, 6, 5, [6, 6], 5, 5, 6, 6]"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"4fNw8wbysAJs","colab_type":"text"},"source":["Great! Now how about count()? The count() method will count the number of occurrences of an element in a list."]},{"cell_type":"code","metadata":{"id":"N-r-sj16sAJt","colab_type":"code","outputId":"6c5d3892-c5f5-46c6-aed1-cfb193546231","colab":{}},"source":["# Check how many times 2 shows up in the list\n","lst.count(2)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"1Gbf5eXXsAJx","colab_type":"text"},"source":["You can always use Shift+Tab in the Jupyter Notebook to get more help about the method. In general Python you can use the help() function: "]},{"cell_type":"code","metadata":{"id":"8bvHQwBXsAJx","colab_type":"code","outputId":"c5434d7c-1886-450e-d218-5e2434f32de7","colab":{}},"source":["help(lst.count)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Help on built-in function count:\n","\n","count(...) method of builtins.list instance\n","    L.count(value) -> integer -- return number of occurrences of value\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8EV-DxctsAJ0","colab_type":"text"},"source":["Feel free to play around with the rest of the methods for a list. Later on in this section your quiz will involve using help and Google searching for methods of different types of objects!"]},{"cell_type":"markdown","metadata":{"id":"P2U_izGxsAJ1","colab_type":"text"},"source":["Great! By this lecture you should feel comfortable calling methods of objects in Python!"]},{"cell_type":"markdown","metadata":{"id":"S6ZpIrv1sAJ1","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"0Mb8T-ErsAJ2","colab_type":"text"},"source":["# 4. Functions\n","\n","## Introduction to Functions\n","\n","This lecture will consist of explaining what a function is in Python and how to create one. Functions will be one of our main building blocks when we construct larger and larger amounts of code to solve problems.\n","\n","**So what is a function?**\n","\n","Formally, a function is a useful device that groups together a set of statements so they can be run more than once. They can also let us specify parameters that can serve as inputs to the functions.\n","\n","On a more fundamental level, functions allow us to not have to repeatedly write the same code again and again. If you remember back to the lessons on strings and lists, remember that we used a function len() to get the length of a string. Since checking the length of a sequence is a common task you would want to write a function that can do this repeatedly at command.\n","\n","Functions will be one of most basic levels of reusing code in Python, and it will also allow us to start thinking of program design (we will dive much deeper into the ideas of design when we learn about Object Oriented Programming)."]},{"cell_type":"markdown","metadata":{"id":"cBaW-4HXsAJ2","colab_type":"text"},"source":["## def Statements\n","\n","Let's see how to build out a function's syntax in Python. It has the following form:"]},{"cell_type":"code","metadata":{"id":"is2u0om4sAJ3","colab_type":"code","colab":{}},"source":["def name_of_function(arg1,arg2):\n","    '''\n","    This is where the function's Document String (docstring) goes\n","    '''\n","    # Do stuff here\n","    # Return desired result"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QLqMjivmsAJ4","colab_type":"text"},"source":["We begin with <code>def</code> then a space followed by the name of the function. Try to keep names relevant, for example len() is a good name for a length() function. Also be careful with names, you wouldn't want to call a function the same name as a [built-in function in Python](https://docs.python.org/2/library/functions.html) (such as len).\n","\n","Next come a pair of parentheses with a number of arguments separated by a comma. These arguments are the inputs for your function. You'll be able to use these inputs in your function and reference them. After this you put a colon.\n","\n","Now here is the important step, you must indent to begin the code inside your function correctly. Python makes use of *whitespace* to organize code. Lots of other programing languages do not do this, so keep that in mind.\n","\n","Next you'll see the docstring, this is where you write a basic description of the function. Using iPython and iPython Notebooks, you'll be able to read these docstrings by pressing Shift+Tab after a function name. Docstrings are not necessary for simple functions, but it's good practice to put them in so you or other people can easily understand the code you write.\n","\n","After all this you begin writing the code you wish to execute.\n","\n","The best way to learn functions is by going through examples. So let's try to go through examples that relate back to the various objects and data structures we learned about before."]},{"cell_type":"markdown","metadata":{"id":"kRpC5dZ7sAJ5","colab_type":"text"},"source":["### Example 1: A simple print 'hello' function"]},{"cell_type":"code","metadata":{"id":"r0QoKSdZsAJ6","colab_type":"code","colab":{}},"source":["def say_hello():\n","    print('hello')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BXK2NmUfsAJ8","colab_type":"text"},"source":["Call the function:"]},{"cell_type":"code","metadata":{"id":"QOz_txaDsAJ9","colab_type":"code","outputId":"3f4acf3f-7183-4af9-8090-30006ce929bc","colab":{}},"source":["say_hello()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["hello\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7qaXHw01sAKA","colab_type":"text"},"source":["### Example 2: A simple greeting function\n","Let's write a function that greets people with their name."]},{"cell_type":"code","metadata":{"id":"lSXk9HkosAKB","colab_type":"code","colab":{}},"source":["def greeting(name):\n","    print('Hello %s' %(name))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zaKd_-rRsAKD","colab_type":"code","outputId":"f0ae8fb4-f24b-4738-c8cb-a6d77f974a6d","colab":{}},"source":["greeting('Jose')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Hello Jose\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"tXbJTsTSsAKF","colab_type":"text"},"source":["## Using return\n","Let's see some example that use a <code>return</code> statement. <code>return</code> allows a function to *return* a result that can then be stored as a variable, or used in whatever manner a user wants.\n","\n","### Example 3: Addition function"]},{"cell_type":"code","metadata":{"id":"eAqh8Us_sAKG","colab_type":"code","colab":{}},"source":["def add_num(num1,num2):\n","    return num1+num2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1qnp1xoCsAKI","colab_type":"code","outputId":"33713fab-d8a4-4f99-b2b0-500280568256","colab":{}},"source":["add_num(4,5)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"WlCmCcGXsAKL","colab_type":"code","colab":{}},"source":["# Can also save as variable due to return\n","result = add_num(4,5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1y6LBUS5sAKP","colab_type":"code","outputId":"535cc87a-810b-4b2c-f09f-1aeaf7161a15","colab":{}},"source":["print(result)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KjmVGzxisAKS","colab_type":"text"},"source":["What happens if we input two strings?"]},{"cell_type":"code","metadata":{"id":"_4f0Zf07sAKS","colab_type":"code","outputId":"f276148d-677c-4a8d-efa1-74b29345f33b","colab":{}},"source":["add_num('one','two')"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'onetwo'"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"UKVP833NsAKU","colab_type":"text"},"source":["Note that because we don't declare variable types in Python, this function could be used to add numbers or sequences together! We'll later learn about adding in checks to make sure a user puts in the correct arguments into a function.\n","\n","Let's also start using <code>break</code>, <code>continue</code>, and <code>pass</code> statements in our code. We introduced these during the <code>while</code> lecture."]},{"cell_type":"markdown","metadata":{"collapsed":true,"id":"9SnJPMNlsAKV","colab_type":"text"},"source":["Finally let's go over a full example of creating a function to check if a number is prime (a common interview exercise).\n","\n","We know a number is prime if that number is only evenly divisible by 1 and itself. Let's write our first version of the function to check all the numbers from 1 to N and perform modulo checks."]},{"cell_type":"code","metadata":{"id":"D3NR9YpPsAKW","colab_type":"code","colab":{}},"source":["def is_prime(num):\n","    '''\n","    Naive method of checking for primes. \n","    '''\n","    for n in range(2,num):\n","        if num % n == 0:\n","            print(num,'is not prime')\n","            break\n","    else: # If never mod zero, then prime\n","        print(num,'is prime!')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gk3qdBmrsAKb","colab_type":"code","outputId":"924be71d-5d94-4b26-d904-802da14550f2","colab":{}},"source":["is_prime(16)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["16 is not prime\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aOApu0iAsAKg","colab_type":"code","outputId":"5cc064f5-4c07-414d-ed47-19e1e110048e","colab":{}},"source":["is_prime(17)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["17 is prime!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"M1_MIZ2AsAKi","colab_type":"text"},"source":["Note how the <code>else</code> lines up under <code>for</code> and not <code>if</code>. This is because we want the <code>for</code> loop to exhaust all possibilities in the range before printing our number is prime.\n","\n","Also note how we break the code after the first print statement. As soon as we determine that a number is not prime we break out of the <code>for</code> loop.\n","\n","We can actually improve this function by only checking to the square root of the target number, and by disregarding all even numbers after checking for 2. We'll also switch to returning a boolean value to get an example of using return statements:"]},{"cell_type":"code","metadata":{"id":"-_f5HAqrsAKj","colab_type":"code","colab":{}},"source":["import math\n","\n","def is_prime2(num):\n","    '''\n","    Better method of checking for primes. \n","    '''\n","    if num % 2 == 0 and num > 2: \n","        return False\n","    for i in range(3, int(math.sqrt(num)) + 1, 2):\n","        if num % i == 0:\n","            return False\n","    return True"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"y1XXBjKVsAKn","colab_type":"code","outputId":"76c98fc7-b936-4f5b-96ab-4d7f22fb9e9a","colab":{}},"source":["is_prime2(18)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"iUPtdichsAKp","colab_type":"text"},"source":["Why don't we have any <code>break</code> statements? It should be noted that as soon as a function *returns* something, it shuts down. A function can deliver multiple print statements, but it will only obey one <code>return</code>."]},{"cell_type":"markdown","metadata":{"id":"gQpudBWlsAKq","colab_type":"text"},"source":["Great! You should now have a basic understanding of creating your own functions to save yourself from repeatedly writing code!"]},{"cell_type":"code","metadata":{"id":"89T2dx6ksAKr","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}
